#include "condor_common.h"
#include "condor_config.h"
#include "condor_daemon_core.h"
#include "compat_classad.h"
#include "condor_version.h"
#include "classad_log.h"
#include "probability_function.h"
#include <fstream>

double bimodal_johnson_cdf_10min[NBINS+1] = {0.3, 0.29298488396698014, 0.2752498185972666, 0.23009456430307562, 0.2019088714040791, 0.18146856942842648, 0.16552663822137306, 0.15256430423777437, 0.14172857731429533, 0.13248680279627656, 0.12448223283610468, 0.11746366533395704, 0.11124740659721626, 0.1056950869819134, 0.10069994977107127, 0.0961779791022396, 0.09206194110510744, 0.08829725598405823, 0.08483906283523947, 0.0816500853822549, 0.07869904971458277, 0.07595949117260653, 0.07340884106487303, 0.07102771817245415, 0.06879937248395793, 0.06670924369336698, 0.06474460731911141, 0.06289428849686376, 0.06114842859200455, 0.059498293437191, 0.05793611466514583, 0.05645495757108909, 0.05504861040373927, 0.05371149108715844, 0.052438568215082554, 0.051225293803700486, 0.05006754578763071, 0.048961578633011316, 0.047903980747505626, 0.04689163760912421, 0.045921699728628605, 0.044991554714871596, 0.04409880283706252, 0.04324123557897871, 0.04241681676247595, 0.0416236658850736, 0.040860043371863934, 0.04012433748784343, 0.039415052694816766, 0.03873079926873819, 0.03807028401988663, 0.03743230198055194, 0.03681572894368569, 0.03621951475184832, 0.03564267724925513, 0.03508429682118795, 0.03454351145482622, 0.03401951226392919, 0.03351153942699502, 0.033018878494713605, 0.03254085702787518, 0.03207684153152041, 0.031626234655128364, 0.031188472632125593, 0.030763022935037902, 0.030349382125258707, 0.029947073878730284, 0.029555647170869392, 0.02917467460585766, 0.02880375087699155, 0.028442491346175453, 0.028090530731868464, 0.027747521895881234, 0.027413134720382083, 0.027087055067326747, 0.02676898381328656, 0.02645863595332734, 0.026155739768195952, 0.025860036049611575, 0.025571277378941926, 0.02528922745497815, 0.025013660466910146, 0.02474436050895395, 0.02448112103339604, 0.024223744339103206, 0.02397204109280091, 0.023725829880654, 0.023484936787891507, 0.02324919500440545, 0.023018444454424646, 0.022792531448518765, 0.022571308356328194, 0.022354633298543237, 0.022142369856771458, 0.021934386800037915, 0.021730557826758704, 0.021530761321115935, 0.021334880122841744, 0.021142801309491966, 0.020954415990356152, 0.020769619111211328, 0.020588309269182165, 0.02041038853702053, 0.020235762296163657, 0.02006433907797185, 0.01989603041258532, 0.019730750684873913, 0.01956841699698608, 0.019408949037031192, 0.01925226895345603, 0.019098301234699307, 0.018946972593729235, 0.01879821185708796, 0.018651949858083335, 0.01850811933378315, 0.018366654825480024, 0.018227492582306267, 0.018090570467688857, 0.017955827868344956, 0.017823205605532088, 0.017692645848290188, 0.01756409202846331, 0.017437488757415315, 0.017312781744703555, 0.017189917720017694, 0.017068844363090776, 0.016949510258603657, 0.01683186494390116, 0.016715859364500534, 0.016601448546813218, 0.0164886105257068, 0.016377554287885197, 0.016273993673512722, 0.01698850366235896, 0.06091993119542141, 0.1736794130169068, 0.2917618268896647, 0.3944164744466578, 0.4795881126194941, 0.5495284225779667, 0.6070617728683924, 0.6546822882325464, 0.6944032231747772, 0.7275826139426751, 0.7444845759667864, 0.7384077827294743, 0.7237123191798537, 0.7062008585088382, 0.6878989836573373, 0.6696617075945861, 0.6519057434844946, 0.6348559097989576, 0.6186425432588886, 0.6033450094312126, 0.5890130715365698, 0.5756782393738751, 0.5633602324427088, 0.5520709175047511, 0.5418168785852673, 0.5326012178806375, 0.5244249101904626, 0.5172878911473191, 0.5111899834890609, 0.5061317240727856, 0.5021151314149507, 0.49914444102444405, 0.4972268292444679, 0.496373143285112, 0.4965986542310742, 0.49792385026150976, 0.5003752886678573, 0.5039865272263235, 0.5087991578754513, 0.5148639682526497, 0.5222422591251434, 0.5310073475052826, 0.5412462851262918, 0.5530618178231712, 0.566574599182722, 0.5819256440191999, 0.5992789494406945, 0.6188240958954639, 0.6407784134587986, 0.6653878504946866, 0.6929247846037698, 0.7236791718551743, 0.7579354919965088, 0.7959190691964146, 0.8376737590512001, 0.8827743808204652, 0.9295881310091605, 0.9729633362091804, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99};
double bimodal_johnson_cdf_20min[NBINS+1] = {0.4, 0.37603347094273165, 0.35587639670918275, 0.31146978629690997, 0.2822766079664259, 0.26019326825246564, 0.24234987570721803, 0.22739055079652012, 0.2145435204732182, 0.20331932941819353, 0.19338464912013661, 0.18450067625652689, 0.17648970447231493, 0.1692155243040032, 0.16257122890161343, 0.15647126254973973, 0.15084603419833353, 0.14563815138957922, 0.14079971605165081, 0.13629033808020083, 0.13207564721142653, 0.1281261588924246, 0.12441639677664208, 0.1209242046080516, 0.11763020011188559, 0.11451733688945208, 0.11157054951529032, 0.10877646347806855, 0.10612315619349853, 0.10359995863209709, 0.10119728953267819, 0.09890651597347525, 0.096719835424153, 0.0946301754267391, 0.09263110783829273, 0.0907167751746241, 0.08888182706708925, 0.08712136521584621, 0.08543089551686796, 0.08380628627424097, 0.08224373159717038, 0.08073971923276194, 0.07929100220875787, 0.07789457376088604, 0.07654764510192534, 0.07524762565756367, 0.07399210545042949, 0.07277883936052289, 0.07160573302941235, 0.07047083020839419, 0.06937230137846008, 0.06830843349328217, 0.06727762071624142, 0.06627835603938703, 0.06530922368660805, 0.06436889221562442, 0.06345610824398805, 0.06256969073340084, 0.061708525774528726, 0.06087156182130577, 0.06005780532963816, 0.05926631676056643, 0.05849620691243215, 0.057746633550520274, 0.05701679830608585, 0.05630594381969096, 0.05561335110643289, 0.05493833712298346, 0.05428025251842606, 0.053638479552703976, 0.05301243016811391, 0.05240154420071635, 0.0518052877198134, 0.05122315148478366, 0.05065464950957981, 0.05009931772610284, 0.04955671273847855, 0.04902641066099084, 0.04850800603307865, 0.04800111080539072, 0.04750535339142058, 0.047020377779719215, 0.046545842702112566, 0.04608142085373766, 0.045626798161062, 0.04518167309436707, 0.04474575602146418, 0.04431876859967108, 0.04390044320331364, 0.04349052238423188, 0.043088758362964046, 0.0426949125484602, 0.042308755084337894, 0.04193006441983975, 0.041558626903786415, 0.04119423639994039, 0.040836693922307384, 0.04048580728900335, 0.04014139079340715, 0.039803264891403234, 0.039471255903594744, 0.03914519573143698, 0.0388249215863041, 0.03851027573055885, 0.038201105229746415, 0.037897261715080136, 0.037598601155428304, 0.037304983638049835, 0.03701627315736174, 0.03673233741105767, 0.03645304760293999, 0.03617827825189552, 0.0359079070065858, 0.03564181446578074, 0.03537988400530085, 0.03512200161588407, 0.03486805576839751, 0.03461793737271975, 0.034371540139425054, 0.034128763121545794, 0.03388952922743527, 0.033653989445634934, 0.033427704849207915, 0.034007167150987, 0.07706264031068068, 0.18778375051013899, 0.303766117070333, 0.4046095745610232, 0.4882872445405609, 0.5570069032923405, 0.6135407782562272, 0.6603377478035862, 0.6993765031874768, 0.7322105777034003, 0.7600505580182587, 0.7838409654748103, 0.8043225176830482, 0.8220800800912372, 0.8375789210317409, 0.8511919883372324, 0.8632204599701023, 0.8739092783063673, 0.8834583904016519, 0.8919442843026579, 0.8949865007015584, 0.8890007298016785, 0.8793618112677479, 0.8683988201139718, 0.857000582135408, 0.8456002844423194, 0.8344550426954541, 0.8237405261839611, 0.8135886552738076, 0.8041046836698676, 0.7953758271318121, 0.7874760873961101, 0.7804692395872623, 0.7744108841517341, 0.7693500000712165, 0.7653302190810509, 0.7623909330371519, 0.7605682905380767, 0.7598961082509121, 0.7604067044107656, 0.7621316499690318, 0.7651024228793294, 0.7693509401770662, 0.7749099281644175, 0.7818130699381461, 0.790094837044761, 0.7997898607895939, 0.8109316160674633, 0.8235500541816455, 0.8376675896145412, 0.8532924388136371, 0.8704075618688214, 0.888952007714322, 0.9087884397696904, 0.9296436839536043, 0.9509909747570654, 0.9717844818861466, 0.9896942752355639, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99, 0.99};
double bimodal_johnson_cdf_30min[NBINS+1] = {0.5, 0.4234296509986592, 0.4031607639292917, 0.3603745162690327, 0.3316555269553936, 0.30954521580660527, 0.2914036354898301, 0.27598327239012677, 0.26257294992368885, 0.2507204697322079, 0.24011680857937914, 0.23053965597771645, 0.2218228018942866, 0.2138381972656983, 0.20648479464012895, 0.19968126995749388, 0.19336108926185666, 0.18746905622136323, 0.1819588299121639, 0.17679109854644326, 0.1719322087273477, 0.16735311851908133, 0.1630285854625537, 0.1589365281683729, 0.15505751823048228, 0.1513743714057907, 0.14787181539493677, 0.14453621743458386, 0.14135535909480826, 0.13831824869880593, 0.13541496399801303, 0.13263651938026377, 0.1299747531233852, 0.12742223114374862, 0.12497216440762661, 0.12261833772892454, 0.12035504811049759, 0.11817705112736467, 0.11607951412046598, 0.11405797518537222, 0.11210830711370307, 0.11022668558515357, 0.10840956102199173, 0.10665363361107913, 0.10495583107506953, 0.10331328883772253, 0.10172333228079292, 0.10018346083374725, 0.09869133367422296, 0.09724475684796836, 0.09584167164301438, 0.09448014407486177, 0.09315835535819594, 0.09187459325661593, 0.09062724421553127, 0.08941478619511174, 0.08823578213027278, 0.08708887395339744, 0.08597277712304259, 0.08488627560842565, 0.08382821728518829, 0.08279750970290342, 0.08179311618913852, 0.08081405225869487, 0.07985938229998822, 0.0789282165134773, 0.07801970807964259, 0.07713305053630982, 0.07626747534714225, 0.0754222496449249, 0.07459667413486352, 0.07379008114454241, 0.07300183280845467, 0.07223131937614961, 0.07147795763405426, 0.07074118943193332, 0.07002048030576319, 0.06931531818952713, 0.06862521220909361, 0.06794969155193153, 0.06728830440694862, 0.06664061696921873, 0.06600621250479995, 0.0653846904712356, 0.06477566568968812, 0.06417876756497537, 0.0635936393500724, 0.06301993745190587, 0.062457330775508635, 0.06190550010382037, 0.0613641375106183, 0.060832945804242096, 0.06031163799994083, 0.05979993681881804, 0.05929757421148613, 0.05880429090466349, 0.05831983596905888, 0.057843966406989224, 0.05737644675826973, 0.0569170487230044, 0.05646555079999541, 0.05602173793960113, 0.055585401210050706, 0.055156337476610896, 0.05473434909405103, 0.05431924361616889, 0.05391083353803888, 0.053508936135620896, 0.05311337370556589, 0.05272397594833704, 0.05234059802424687, 0.0519633208236681, 0.05159753562864426, 0.052024817032554675, 0.09414447510141735, 0.20270144600816523, 0.3164567150069838, 0.41538052700821426, 0.4974754706956271, 0.5649024603367925, 0.6203782644013457, 0.6663036068597591, 0.70461862203336, 0.7368467575251615, 0.764175269182889, 0.7875305503927967, 0.8076391551769571, 0.8250748041539713, 0.8402939289456047, 0.8536624168862055, 0.8654757645335407, 0.8759743359461034, 0.8853549878189564, 0.8937799892245211, 0.9013839158534099, 0.908279017895028, 0.91455942960493, 0.9203044935176395, 0.925581403054774, 0.9304473165792184, 0.9349510579661741, 0.93913448182451, 0.9430332938880198, 0.9466347099844722, 0.947715367702139, 0.9444053984789408, 0.9393463553368813, 0.9337221114340291, 0.9280139006027914, 0.9224795852920817, 0.9172896484942243, 0.9125729262832456, 0.9084345904889246, 0.9049641235977075, 0.9022392174421082, 0.9003278465093459, 0.8992894481316064, 0.8991756106438978, 0.9000304313323618, 0.9018905824741548, 0.904785045064231, 0.9087344016745567, 0.9137494990711755, 0.9198291723558242, 0.9269565251782944, 0.935092906960803, 0.9441680488124935, 0.9540634086251483, 0.9645825358189006, 0.975393737303591, 0.9859028299072792, 0.9948882216701425, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999, 0.999};

ProbabilityFunction::ProbabilityFunction()
{
	m_type = UNKNOWN;
	m_histogram = nullptr;
}

ProbabilityFunction::ProbabilityFunction(DISTRIBUTION_TYPE type)
{
	m_type = type;
	m_histogram = nullptr;
}

ProbabilityFunction::ProbabilityFunction(DISTRIBUTION_TYPE type, int duration_minutes)
{
	m_type = type;
	m_histogram = nullptr;
	if(type == UNIFORM) {
		m_distribution_name = "uniform";
		m_duration_minutes = duration_minutes;
	}
}

ProbabilityFunction::ProbabilityFunction(DISTRIBUTION_TYPE type, double parameter1, double parameter2)
{
	m_type = type;
	m_histogram = nullptr;
	if(type == WEIBULL) {
		m_distribution_name = "weibull";
		m_duration_minutes = -1;
		m_shape_parameter = parameter1;
		m_scale_parameter = parameter2;
		// we need to create an extra bin which stores all out-of-range data
		m_histogram = new long long int[NBINS+1];
		for(int i = 0; i < NBINS+1; ++i) {
			m_histogram[i] = 0;
		}
		// generating histogram pdf
		std::default_random_engine generator;
		std::weibull_distribution<double> distribution(m_shape_parameter, m_scale_parameter);
		for(int i = 0; i < NROLLS; ++i) {
			double number = distribution(generator);
			if(number < NBINS) {
				++m_histogram[int(number)];
			} else {
				// all number that are larger than NBINS go into the very last bin.
				// remember there are NBINS+1 bins.
				++m_histogram[NBINS];
			}
		}
	}
	std::fstream histogram_fs;
	histogram_fs.open("/home/centos/histogram.txt", std::fstream::out | std::fstream::app);
	histogram_fs << m_distribution_name << " (" << parameter1 << "," << parameter2 << ");" << std::endl;
	for (int i = 0; i < NBINS; ++i) {
		histogram_fs << i << "-" << (i+1) << ": ";
		// scale histogram to 1/200
		histogram_fs << std::string(m_histogram[i]/200,'*') << ", " << m_histogram[i] << "/" << NROLLS << std::endl;
	}
	histogram_fs.close();
}

ProbabilityFunction::~ProbabilityFunction() {
	if(m_histogram) {
		delete [] m_histogram;
	}
	m_histogram = nullptr;
}

double ProbabilityFunction::getProbability(double constant)
{
	return constant;
}

double ProbabilityFunction::getProbability()
{
	return (double)rand() / (double)RAND_MAX;
}

double ProbabilityFunction::getProbability(time_t start_time, time_t current_time, int time_to_failure_minutes)
{
	// we need to think about different cases:
	// 1. time_to_failure_seconds > 0, time_to_end_seconds > 0, time_to_failure_seconds < time_to_end_seconds (valid location);
	// 2. time_to_failure_seconds > 0, time_to_end_seconds > 0, time_to_failure_seconds >= time_to_end_seconds (designated to fail);
	// 3. time_to_failure_seconds > 0, time_to_end_seconds <=0, (pass the pdf's expected deadline - should fail);
	// 4. time_to_failure_seconds <=0, time_to_end_seconds > 0, (cache's expiry has been passed, so cache is safe now to be deleted);
	// 5. time_to_failure_seconds <=0, time_to_end_seconds <=0, time_to_failure_seconds < time_to_end_seconds (failure_rate > 1.0 but cache is safe to be deleted now)
	// 6. time_to_failure_seconds <=0, time_to_end_seconds <=0, time_to_failure_seconds >=time_to_end_seconds (0.0 < failure_rate < 1.0 but cache is safe to be deleted now)
	// We will replace this with a function which calculate pdf
	double failure_rate = 0.0;
	if(m_type == GAUSSIAN) {
		// TODO: calculate gaussian pdf
		failure_rate = 0.0;
	} else if(m_type == UNIFORM) {
		time_t end_time = start_time + m_duration_minutes * 60;
		double time_to_failure_seconds = time_to_failure_minutes * 60.0;
		double time_to_end_seconds = (end_time - current_time) * 1.0;
		failure_rate = time_to_failure_seconds / time_to_end_seconds;
	} else if(m_type == WEIBULL) {
		time_t time_at_pdf = current_time - start_time;
		int time_at_pdf_minutes = int(time_at_pdf/60.0);
		if(time_at_pdf_minutes > NBINS) return 1.0;
		long long int time_to_failure_histogram = 0;
		long long int time_to_end_histogram = 0;
		for(int i = time_at_pdf_minutes; i <= NBINS; ++i) {
			if(i <= time_at_pdf_minutes+time_to_failure_minutes) {
				time_to_failure_histogram += m_histogram[i];
			}
			time_to_end_histogram += m_histogram[i];
		}
		failure_rate = time_to_failure_histogram * 1.0 / time_to_end_histogram;
	} else if(m_type == BIMODALJOHNSON) {
		time_t time_at_pdf = current_time - start_time;
		int time_at_pdf_minutes = int(time_at_pdf/60.0);
		if(time_at_pdf_minutes > NBINS) return 1.0;
		if(time_to_failure_minutes == 10) {
			dprintf(D_FULLDEBUG, "In ProbabilityFunction::getProbability, 10min\n");//##
			failure_rate = bimodal_johnson_cdf_10min[time_at_pdf_minutes];
		} else if(time_to_failure_minutes == 20) {
			dprintf(D_FULLDEBUG, "In ProbabilityFunction::getProbability, 20min\n");//##
			failure_rate = bimodal_johnson_cdf_20min[time_at_pdf_minutes];
		} else if(time_to_failure_minutes == 30) {
			dprintf(D_FULLDEBUG, "In ProbabilityFunction::getProbability, 30min\n");//##
			failure_rate = bimodal_johnson_cdf_30min[time_at_pdf_minutes];
		}
	}
	return failure_rate;
}
